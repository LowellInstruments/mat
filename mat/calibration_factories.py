from mat.v2_calibration import V2Calibration
from mat.v3_calibration import V3Calibration


CALIBRATION_STRING_LENGTH = 380
CALIBRATION_START_TAG = 'HSS'
CALIBRATION_END_TAG = 'HSE'
DEFAULT_COEFFICIENTS = {'AXX': 1, 'AXY': 0, 'AXZ': 0, 'AXC': 0, 'AXV': 0,
                        'AYX': 0, 'AYY': 1, 'AYZ': 0, 'AYC': 0, 'AYV': 0,
                        'AZX': 0, 'AZY': 0, 'AZZ': 1, 'AZC': 0, 'AZV': 0,
                        'RVN': 2,
                        'TMO': 0,
                        'TMR': 10000,
                        'TMA': 0.0011238100354,
                        'TMB': 0.0002349457073,
                        'TMC': 0.0000000848361,
                        'MXX': 1, 'MXY': 0, 'MXZ': 0, 'MXV': 0,
                        'MYX': 0, 'MYY': 1, 'MYZ': 0, 'MYV': 0,
                        'MZX': 0, 'MZY': 0, 'MZZ': 1, 'MZV': 0,
                        'PRA': 3, 'PRB': 0.0016,
                        'PHA': 0, 'PHB': 0}


def make_from_calibration_file(file_path):
    """
    Create a calibration object based on a calibration file generated by the
    Lowell Instruments calibration software.
    """

    with open(file_path, 'r') as fid:
        coefficients = _find_coefficients(fid)

    # if the file didn't have an RVN tag, it means it was a V2 calibration
    if 'RVN' not in coefficients.keys():
        coefficients['RVN'] = '2'

    klass = {'2': V2Calibration, '3': V3Calibration}.get(coefficients['RVN'])
    return klass(coefficients)


def _find_coefficients(fid):
    coefficients = {}
    for line in fid:
        line = _remove_comments(line.strip())
        if not line:
            continue
        tag, value = _split_tag_value(line)
        coefficients[tag] = value
    return coefficients


def _remove_comments(line):
    if line.startswith('//'):
        return ''
    inline_comment_ind = line.find('//', 9)
    if inline_comment_ind > 0:
        return line[:inline_comment_ind].strip()
    return line


def _split_tag_value(line):
    tag_value = line.split(' ')
    if len(tag_value) != 2:
        raise ValueError('Unable to split tag and value from line: ' + line)
    return tag_value[0], tag_value[1]


def calibration_from_string(calibration_string):
    """
    Factory function to return correct calibration subclass based on a string
    """
    calibration_string = _crop_calibration_string(calibration_string)
    if calibration_string.startswith('HSSRVN13'):
        return V3Calibration.load_from_string(calibration_string)
    elif calibration_string.startswith('HSS'):
        return V2Calibration.load_from_string(calibration_string)
    else:
        return V2Calibration(DEFAULT_COEFFICIENTS)


def _crop_calibration_string(calibration_string):
    start_index = calibration_string.find(CALIBRATION_START_TAG)
    end_index = calibration_string.find(CALIBRATION_END_TAG)
    if start_index == -1 and end_index == -1:
        return ''
    if start_index == -1 and end_index > -1:
        raise ValueError('{} tag missing'.format(CALIBRATION_START_TAG))
    if start_index > -1 and end_index == -1:
        raise ValueError('{} tag missing'.format(CALIBRATION_END_TAG))
    return calibration_string[start_index:end_index+len(CALIBRATION_END_TAG)]
